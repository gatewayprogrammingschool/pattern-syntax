%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Pattern
file_extensions:
  - pattern
first_line_match: "Pattern File"

scope: source.pattern
variables:
  number_number: '((\d+)(\.?)(\d*))'
  number_hex: '(((?:0[xX]+)|[$])([a-fA-F0-9]+))'
  string: '("[^"]*")'

  bool_op_equality: '(?:==|Is)'
  bool_op_logical_and: '(?:&&|And)'
  bool_op_logical_or: '(?:\|\||Or)'
  bool_op_logical_not: '(?:!|Not)'
  bool_op_xor: '(?:\^|Xor)'
  bool_op: '(?:({{bool_op_equality}}|{{bool_op_logical_and}}|{{bool_op_logical_not}}|{{bool_op_logical_or}}|{{bool_op_xor}}))'

  assignment_op_direct: '(?:=|From)'
  assignment_op_and: '(?:&)'
  assignment_op_or: '(?:\|)'
  assignment_op: '(?:({{assignment_op_and}}|{{assignment_op_or}}))'

  math_op_addition: '(?:[+])'
  math_op_subtraction: '(?:[-])' 
  math_op_multiplication: '(?:[*])'
  math_op_division: '(?:[/])'
  math_op_remainder: '(?:[%])'
  math_op_power: '(?:^)'
  math_op_root: '(?:[\#])'
  math_op: '(?:{{math_op_addition}}|{{math_op_division}}|{{math_op_multiplication}}|{{math_op_power}}|{{math_op_remainder}}|{{math_op_root}}|{{math_op_subtraction}})'

  string_op_concatenation: '(?:++)'
  string_op_remove_all: '(?:--)'
  string_op_remove_first: '(?:-<)'
  string_op_remove_last: '(?:->)'
  string_op_replace_all: '(?:\!\!)'
  string_op_replace_first: '(?:\!<)'
  string_op_replace_last: '(?:\!>)'
  string_op_first_index_of: '(?:<<)'
  string_op_last_index_of: '(?:>>)'
  string_op_all_index_of: '(?:><)'
  string_op: '(?:{{string_op_all_index_of}}|{{string_op_concatenation}}|{{string_op_first_index_of}}|{{string_op_last_index_of}}|{{string_op_remove_all}}|{{string_op_remove_first}}|{{string_op_remove_last}}|{{string_op_replace_all}}|{{string_op_replace_first}}|{{string_op_replace_last}})'

  operations: '(?:{{bool_op}}|{{assignment_op}}|{{math_op}}|{{string_op}})'

  unicode_char: '(?:\\u\h{4}|\\U\h{8})'
  escaped_char: '(?:\\[abfnrtv"''\\]|{{unicode_char}}|\\x[0-9a-fA-F]{1,4}|\\[0-9]{1,3})'

  visibility: '\b(?:Public|Private|Visible)\b'
  
  reserved_base_type: '(?:Type|Reference|Node|Pair|Array|Bag|Flag|Number|Guid|Logical|Character|String|Date|Place|Culture|Enumeration|Enum Node)'
  reserved_patterned_type: '(?:Domain|Singleton|Facade|Model|View|Controller|Bridge|Adapter|DataStore|DataProvider|DataAdapter|DataBridge|ForeignService|Service|Application)'
  base_type: '(?:{{reserved_base_type}}|{{reserved_patterned_type}})'

  reserved_decisions: '(?:If|Else|Else[ ]If|End[ ]If|Compare|With|End[ ]With|To|When|End[ ]Compare|Choice|Other|End[ ]Choice)'
  reserved_errors: '(?:Error|Error Scope|Handle|End Handle|Last Error|Throw|Rethrow)'
  reserved_loops: '(?:Each|Within|End Each|Exit|Next|For|Start|End At|Skip|End For|Do|Until|While|End While)'
  reserved: '(?:{{reserved_constructs}}|{{reserved_decisions}}|{{reserved_errors}}|{{reserved_loops}})'

  reserved_objects: '(?:Object|Delegate|Application[ ]Scope|Application|Enumeration|Test[ ]Set|Test|Singleton|Model|Controller|Facade|Bridge|Adapter|Data[ ]Store|Data[ ]Provider|Data[ ]Adapter|Data[ ]Bridge|Remote|Service)'

  start_char: '(?:{{unicode_char}}|[_\p{L}])'
  other_char: '(?:{{unicode_char}}|[_0=9\p{L}])'
  name_normal: '{{start_char}}{{other_char}}*\b'
  cap_name: '(\p{Lu}{{other_char}})'
  name: '(?:@{{reserved}}@{{base_type}}|@var|@?{{name_normal}})'

  type_separator: '>'
  line_terminator: '\.'

contexts:
  prototype:
    - include: comments
    - match: '^(#)(\s+)'
      captures:
        1: keyword.other.preprocessor.pattern
        2: punctuation.definition.preprocessor.pattern
      push: preprocessor_option

